
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 05 23:16:14 VET 2012
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 05 23:16:14 VET 2012
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\016\000\002\002\004\000\002\002" +
    "\022\000\002\002\003\000\002\002\003\000\002\004\005" +
    "\000\002\004\003\000\002\003\011\000\002\003\011\000" +
    "\002\005\007\000\002\005\003\000\002\006\005\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\010\012\000\002\012\010\000\002\012\010" +
    "\000\002\013\005\000\002\013\003\000\002\014\003\000" +
    "\002\014\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\004\000\002\011\005" +
    "\000\002\020\015\000\002\020\025\000\002\017\003\000" +
    "\002\017\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\005\000\002\016\005\000\002\016" +
    "\004\000\002\016\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\021\003\000\002\021\002\000\002" +
    "\022\004\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\012\002\uffcf\003\006\004\uffcf\053\005\001" +
    "\002\000\062\002\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\012\uffd0\013\uffd0\015\uffd0\017\uffd0\020" +
    "\uffd0\022\uffd0\027\uffd0\033\uffd0\034\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\216\001" +
    "\002\000\062\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\010\uffcd\011\uffcd\012\uffcd\013\uffcd\015\uffcd\017\uffcd\020" +
    "\uffcd\022\uffcd\027\uffcd\033\uffcd\034\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\001" +
    "\002\000\004\002\ufffd\001\002\000\004\002\215\001\002" +
    "\000\006\002\ufffe\004\011\001\002\000\006\013\uffcf\053" +
    "\005\001\002\000\004\013\013\001\002\000\004\051\014" +
    "\001\002\000\010\005\uffcf\010\uffcf\053\005\001\002\000" +
    "\006\005\017\010\016\001\002\000\006\013\uffcf\053\005" +
    "\001\002\000\014\013\uffcf\017\uffcf\020\uffcf\042\uffcf\053" +
    "\005\001\002\000\012\013\030\017\027\020\023\042\025" +
    "\001\002\000\020\006\ufff2\007\ufff2\013\ufff2\017\ufff2\020" +
    "\ufff2\042\ufff2\053\ufff2\001\002\000\016\007\uffcf\013\uffcf" +
    "\017\uffcf\020\uffcf\042\uffcf\053\005\001\002\000\004\027" +
    "\154\001\002\000\020\006\ufff3\007\ufff3\013\ufff3\017\ufff3" +
    "\020\ufff3\042\ufff3\053\ufff3\001\002\000\020\013\047\015" +
    "\041\022\036\027\046\033\037\034\043\047\045\001\002" +
    "\000\020\006\ufff5\007\ufff5\013\ufff5\017\ufff5\020\ufff5\042" +
    "\ufff5\053\ufff5\001\002\000\004\027\116\001\002\000\006" +
    "\052\uffcf\053\005\001\002\000\020\006\ufff4\007\ufff4\013" +
    "\ufff4\017\ufff4\020\ufff4\042\ufff4\053\ufff4\001\002\000\004" +
    "\052\033\001\002\000\004\016\034\001\002\000\022\013" +
    "\uffcf\015\uffcf\022\uffcf\027\uffcf\033\uffcf\034\uffcf\047\uffcf" +
    "\053\005\001\002\000\020\013\047\015\041\022\036\027" +
    "\046\033\037\034\043\047\045\001\002\000\012\013\047" +
    "\015\041\022\036\027\071\001\002\000\016\030\uffdc\043" +
    "\uffdc\045\uffdc\046\uffdc\051\uffdc\053\uffdc\001\002\000\014" +
    "\043\uffde\045\106\046\110\051\uffde\053\uffde\001\002\000" +
    "\046\016\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\030\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\043" +
    "\uffea\045\uffea\046\uffea\050\uffea\051\uffea\053\uffea\001\002" +
    "\000\036\016\067\021\062\022\060\023\064\024\055\025" +
    "\063\035\057\036\061\037\065\040\066\041\070\043\uffdf" +
    "\051\uffdf\053\uffdf\001\002\000\016\030\uffdb\043\uffdb\045" +
    "\uffdb\046\uffdb\051\uffdb\053\uffdb\001\002\000\016\030\uffdd" +
    "\043\uffdd\045\uffdd\046\uffdd\051\uffdd\053\uffdd\001\002\000" +
    "\020\013\047\015\041\022\036\027\046\033\037\034\043" +
    "\047\045\001\002\000\020\013\047\015\041\022\036\027" +
    "\046\033\037\034\043\047\045\001\002\000\046\016\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\030\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\043\uffe9\045\uffe9" +
    "\046\uffe9\050\uffe9\051\uffe9\053\uffe9\001\002\000\006\051" +
    "\uffcf\053\005\001\002\000\004\051\052\001\002\000\020" +
    "\006\ufff1\007\ufff1\013\ufff1\017\ufff1\020\ufff1\042\ufff1\053" +
    "\ufff1\001\002\000\010\030\107\045\106\046\110\001\002" +
    "\000\032\016\067\021\062\022\060\023\064\024\055\025" +
    "\063\030\056\035\057\036\061\037\065\040\066\041\070" +
    "\001\002\000\012\013\047\015\041\022\036\027\071\001" +
    "\002\000\046\016\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\030\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\043\uffe2\045\uffe2\046\uffe2\050\uffe2\051\uffe2\053\uffe2" +
    "\001\002\000\012\013\047\015\041\022\036\027\071\001" +
    "\002\000\012\013\047\015\041\022\036\027\071\001\002" +
    "\000\012\013\047\015\041\022\036\027\071\001\002\000" +
    "\012\013\047\015\041\022\036\027\071\001\002\000\012" +
    "\013\047\015\041\022\036\027\071\001\002\000\012\013" +
    "\047\015\041\022\036\027\071\001\002\000\012\013\047" +
    "\015\041\022\036\027\071\001\002\000\012\013\047\015" +
    "\041\022\036\027\071\001\002\000\012\013\047\015\041" +
    "\022\036\027\071\001\002\000\012\013\047\015\041\022" +
    "\036\027\071\001\002\000\012\013\047\015\041\022\036" +
    "\027\071\001\002\000\030\021\062\022\060\023\064\024" +
    "\055\025\063\030\uffd1\043\uffd1\045\uffd1\046\uffd1\051\uffd1" +
    "\053\uffd1\001\002\000\016\021\062\022\060\023\064\024" +
    "\055\025\063\030\056\001\002\000\030\021\062\022\060" +
    "\023\064\024\055\025\063\030\uffd6\043\uffd6\045\uffd6\046" +
    "\uffd6\051\uffd6\053\uffd6\001\002\000\030\021\062\022\060" +
    "\023\064\024\055\025\063\030\uffd3\043\uffd3\045\uffd3\046" +
    "\uffd3\051\uffd3\053\uffd3\001\002\000\030\021\062\022\060" +
    "\023\064\024\055\025\063\030\uffd2\043\uffd2\045\uffd2\046" +
    "\uffd2\051\uffd2\053\uffd2\001\002\000\046\016\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\030\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\043\uffe6\045\uffe6\046\uffe6" +
    "\050\uffe6\051\uffe6\053\uffe6\001\002\000\046\016\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\030\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\043\uffe4\045\uffe4\046" +
    "\uffe4\050\uffe4\051\uffe4\053\uffe4\001\002\000\046\016\uffe8" +
    "\021\uffe8\022\uffe8\023\064\024\055\025\063\030\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\043\uffe8\045\uffe8" +
    "\046\uffe8\050\uffe8\051\uffe8\053\uffe8\001\002\000\030\021" +
    "\062\022\060\023\064\024\055\025\063\030\uffd5\043\uffd5" +
    "\045\uffd5\046\uffd5\051\uffd5\053\uffd5\001\002\000\046\016" +
    "\uffe7\021\uffe7\022\uffe7\023\064\024\055\025\063\030\uffe7" +
    "\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\043\uffe7\045" +
    "\uffe7\046\uffe7\050\uffe7\051\uffe7\053\uffe7\001\002\000\030" +
    "\021\062\022\060\023\064\024\055\025\063\030\uffd4\043" +
    "\uffd4\045\uffd4\046\uffd4\051\uffd4\053\uffd4\001\002\000\046" +
    "\016\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\030" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\043\uffe5" +
    "\045\uffe5\046\uffe5\050\uffe5\051\uffe5\053\uffe5\001\002\000" +
    "\020\013\047\015\041\022\036\027\046\033\037\034\043" +
    "\047\045\001\002\000\016\030\uffd7\043\uffd7\045\uffd7\046" +
    "\uffd7\051\uffd7\053\uffd7\001\002\000\020\013\047\015\041" +
    "\022\036\027\046\033\037\034\043\047\045\001\002\000" +
    "\016\030\uffd9\043\uffd9\045\uffd9\046\uffd9\051\uffd9\053\uffd9" +
    "\001\002\000\030\016\067\021\062\022\060\023\064\024" +
    "\055\025\063\035\057\036\061\037\065\040\066\041\070" +
    "\001\002\000\016\030\uffda\043\uffda\045\uffda\046\uffda\051" +
    "\uffda\053\uffda\001\002\000\016\030\uffd8\043\uffd8\045\uffd8" +
    "\046\uffd8\051\uffd8\053\uffd8\001\002\000\046\016\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\030\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\043\uffe3\045\uffe3\046" +
    "\uffe3\050\uffe3\051\uffe3\053\uffe3\001\002\000\014\013\047" +
    "\014\121\015\041\022\036\027\071\001\002\000\006\030" +
    "\124\050\123\001\002\000\006\030\uffed\050\uffed\001\002" +
    "\000\006\030\uffec\050\uffec\001\002\000\020\021\062\022" +
    "\060\023\064\024\055\025\063\030\uffeb\050\uffeb\001\002" +
    "\000\014\013\047\014\121\015\041\022\036\027\071\001" +
    "\002\000\006\051\uffcf\053\005\001\002\000\004\051\126" +
    "\001\002\000\020\006\ufff0\007\ufff0\013\ufff0\017\ufff0\020" +
    "\ufff0\042\ufff0\053\ufff0\001\002\000\006\030\uffee\050\uffee" +
    "\001\002\000\006\043\uffcf\053\005\001\002\000\004\043" +
    "\132\001\002\000\006\005\uffcf\053\005\001\002\000\004" +
    "\005\134\001\002\000\014\013\uffcf\017\uffcf\020\uffcf\042" +
    "\uffcf\053\005\001\002\000\012\013\030\017\027\020\023" +
    "\042\025\001\002\000\016\006\uffcf\013\uffcf\017\uffcf\020" +
    "\uffcf\042\uffcf\053\005\001\002\000\014\006\141\013\030" +
    "\017\027\020\023\042\025\001\002\000\020\006\ufff6\007" +
    "\ufff6\013\ufff6\017\ufff6\020\ufff6\042\ufff6\053\ufff6\001\002" +
    "\000\010\044\uffcf\051\142\053\005\001\002\000\020\006" +
    "\uffe1\007\uffe1\013\uffe1\017\uffe1\020\uffe1\042\uffe1\053\uffe1" +
    "\001\002\000\004\044\144\001\002\000\006\005\uffcf\053" +
    "\005\001\002\000\004\005\146\001\002\000\014\013\uffcf" +
    "\017\uffcf\020\uffcf\042\uffcf\053\005\001\002\000\012\013" +
    "\030\017\027\020\023\042\025\001\002\000\016\006\uffcf" +
    "\013\uffcf\017\uffcf\020\uffcf\042\uffcf\053\005\001\002\000" +
    "\014\006\152\013\030\017\027\020\023\042\025\001\002" +
    "\000\004\051\153\001\002\000\020\006\uffe0\007\uffe0\013" +
    "\uffe0\017\uffe0\020\uffe0\042\uffe0\053\uffe0\001\002\000\014" +
    "\013\047\014\121\015\041\022\036\027\071\001\002\000" +
    "\006\030\156\050\123\001\002\000\006\051\uffcf\053\005" +
    "\001\002\000\004\051\160\001\002\000\020\006\uffef\007" +
    "\uffef\013\uffef\017\uffef\020\uffef\042\uffef\053\uffef\001\002" +
    "\000\014\007\162\013\030\017\027\020\023\042\025\001" +
    "\002\000\006\002\uffcf\053\005\001\002\000\004\002\001" +
    "\001\002\000\004\013\166\001\002\000\010\005\ufffb\013" +
    "\ufffb\053\ufffb\001\002\000\010\050\ufff7\052\ufff7\053\ufff7" +
    "\001\002\000\010\005\uffcf\013\uffcf\053\005\001\002\000" +
    "\010\050\uffcf\052\uffcf\053\005\001\002\000\006\050\172" +
    "\052\173\001\002\000\006\013\uffcf\053\005\001\002\000" +
    "\010\011\uffcf\012\uffcf\053\005\001\002\000\006\011\175" +
    "\012\176\001\002\000\006\051\uffcf\053\005\001\002\000" +
    "\006\051\uffcf\053\005\001\002\000\004\051\200\001\002" +
    "\000\010\005\ufff9\013\ufff9\053\ufff9\001\002\000\004\051" +
    "\202\001\002\000\010\005\ufffa\013\ufffa\053\ufffa\001\002" +
    "\000\004\013\204\001\002\000\010\050\ufff8\052\ufff8\053" +
    "\ufff8\001\002\000\006\005\207\013\166\001\002\000\010" +
    "\005\ufffc\013\ufffc\053\ufffc\001\002\000\014\013\uffcf\017" +
    "\uffcf\020\uffcf\042\uffcf\053\005\001\002\000\012\013\030" +
    "\017\027\020\023\042\025\001\002\000\016\007\uffcf\013" +
    "\uffcf\017\uffcf\020\uffcf\042\uffcf\053\005\001\002\000\014" +
    "\007\213\013\030\017\027\020\023\042\025\001\002\000" +
    "\006\002\uffcf\053\005\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\000\001\002\000\062\002\uffce\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce" +
    "\015\uffce\017\uffce\020\uffce\022\uffce\027\uffce\033\uffce\034" +
    "\uffce\042\uffce\043\uffce\044\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\010\002\006\021\007\022\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\011\022\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\014" +
    "\022\003\001\001\000\002\001\001\000\006\021\163\022" +
    "\003\001\001\000\006\021\017\022\003\001\001\000\014" +
    "\006\021\007\025\010\023\012\030\020\020\001\001\000" +
    "\002\001\001\000\006\021\160\022\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\041\015\043\016" +
    "\037\017\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\031\022\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\034\022\003" +
    "\001\001\000\012\011\041\015\043\016\037\017\047\001" +
    "\001\000\004\011\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\111\015\043\016\113" +
    "\001\001\000\010\011\053\015\043\016\052\001\001\000" +
    "\002\001\001\000\006\021\050\022\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\104\001\001\000\002\001\001\000\004" +
    "\011\103\001\001\000\004\011\102\001\001\000\004\011" +
    "\101\001\001\000\004\011\100\001\001\000\004\011\077" +
    "\001\001\000\004\011\076\001\001\000\004\011\075\001" +
    "\001\000\004\011\074\001\001\000\004\011\073\001\001" +
    "\000\004\011\071\001\001\000\004\011\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\111\015" +
    "\043\016\112\001\001\000\002\001\001\000\010\011\111" +
    "\015\043\016\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\121\013\116\014\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\121\014\126\001\001\000\006\021\124\022" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\130\022\003\001\001\000\002\001" +
    "\001\000\006\021\132\022\003\001\001\000\002\001\001" +
    "\000\006\021\134\022\003\001\001\000\014\006\135\007" +
    "\025\010\023\012\030\020\020\001\001\000\006\021\136" +
    "\022\003\001\001\000\012\007\137\010\023\012\030\020" +
    "\020\001\001\000\002\001\001\000\006\021\142\022\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\144\022\003\001\001\000\002\001\001\000\006\021\146" +
    "\022\003\001\001\000\014\006\147\007\025\010\023\012" +
    "\030\020\020\001\001\000\006\021\150\022\003\001\001" +
    "\000\012\007\137\010\023\012\030\020\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\121\013\154" +
    "\014\117\001\001\000\002\001\001\000\006\021\156\022" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\137\010\023\012\030\020\020\001\001\000\006\021" +
    "\162\022\003\001\001\000\002\001\001\000\010\003\164" +
    "\004\166\005\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\204\022\003\001\001\000\006\021\170" +
    "\022\003\001\001\000\002\001\001\000\006\021\202\022" +
    "\003\001\001\000\006\021\173\022\003\001\001\000\002" +
    "\001\001\000\006\021\200\022\003\001\001\000\006\021" +
    "\176\022\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\205\005\167\001\001\000\002" +
    "\001\001\000\006\021\207\022\003\001\001\000\014\006" +
    "\210\007\025\010\023\012\030\020\020\001\001\000\006" +
    "\021\211\022\003\001\001\000\012\007\137\010\023\012" +
    "\030\020\020\001\001\000\006\021\213\022\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	private NodoBase root=null;
	private NodoBase funciones=null;
	private NodoBase vars=null;
	private boolean debug=true;	
	private int lineaNum=0;

	public NodoBase getRoot(){
		return root;
	}

	public NodoBase getVars(){
		return vars;
	}
	
	public NodoBase getFunciones(){
		return funciones;
	}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lineas ::= LINEANUEVA 
            {
              NodoBase RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lineas ::= lineas LINEANUEVA 
            {
              NodoBase RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // separar ::= 
            {
              NodoBase RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("separar",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // separar ::= lineas 
            {
              NodoBase RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("separar",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicion ::= expresion DIFERENTE expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= DIFERENTE");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.DIFERENTE);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicion ::= expresion MAYORIGUAL expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MAYORIGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MAYORIGUAL);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicion ::= expresion MAYOR expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MAYOR");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MAYOR);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicion ::= expresion MENORIGUAL expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MENORIGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MENORIGUAL);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicion ::= expresion MENOR expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= MENOR");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MENOR);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicion ::= expresion IGUAL expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: condicion ::= IGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.IGUAL);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresionBool ::= LPARENT expresionBool RPARENT 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= PARENTESIS ");
		RESULT = ex;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresionBool ::= NOT expresionBool 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= NOT expresionBool");
		RESULT = new NodoOperacionBoolUnaria(ex,true);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresionBool ::= expresionBool OR expresionBool 
            {
              NodoBase RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase c1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase c2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= expresionBool OR expresionBool ");
		RESULT = new NodoOperacionBoolLogica(c1,c2,Tipo.OpBoolLogica.OR);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresionBool ::= expresionBool AND expresionBool 
            {
              NodoBase RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase c1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase c2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= expresionBool AND expresionBool ");
		RESULT = new NodoOperacionBoolLogica(c1,c2,Tipo.OpBoolLogica.AND);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresionBool ::= FALSE 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: valorBool ::= FALSE");
		RESULT = new NodoBoolean(false);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresionBool ::= TRUE 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: valorBool ::= TRUE");
		RESULT = new NodoBoolean(true);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresionBool ::= condicion 
            {
              NodoBase RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase c = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresionBool ::= condicion");
		RESULT = c;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionBool",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valorBool ::= expresionBool 
            {
              NodoBase RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase c = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: valorBool ::= expresionBool");
		RESULT = c;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorBool",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valorBool ::= expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: valorBool ::= expresion");
		RESULT = e1;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorBool",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ifx ::= IF valorBool separar THEN separar BEGIN separar seq_sent separar END separar ELSE separar BEGIN separar seq_sent separar END PTCO 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		NodoBase then = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int else1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int else1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase else1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(debug)
			System.out.println("\t Regla: if ::= IF CON ELSE");
		RESULT = new NodoIf(ex, then, else1);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifx",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ifx ::= IF valorBool separar THEN separar BEGIN separar seq_sent separar END PTCO 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase then = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(debug)
			System.out.println("\t Regla: if ::= IF SOLO");
		RESULT = new NodoIf(ex, then);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifx",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= LPARENT expresion RPARENT 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= PARENTESIS ");
		RESULT = e;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= REST expresion 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= RESTA expresion ");
		RESULT = new NodoOperacionMatUnaria(ex);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= expresion MOD expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= MOD ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.MOD);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= expresion DIVI expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= DIVI ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.DIVI);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= expresion MULT expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= MULT ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.MULT);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= expresion REST expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= REST ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.REST);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= expresion SUMA expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= SUMA ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.SUMA);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= IDENTIFICADOR ");
		RESULT = new NodoIdentificador(variable);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= NUMERO 
            {
              NodoBase RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= NUMERO ");
		RESULT = new NodoNumero(num);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // writeValor ::= expresion 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: writeValor ::= expresion");
		RESULT = ex;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writeValor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // writeValor ::= CADENA 
            {
              NodoBase RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: writeValor ::= CADENA");
		RESULT = new NodoCadena(cadena.toString());				
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writeValor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // writeAnidado ::= writeValor 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		if(debug)
			System.out.println("\t Regla: writeAnidado ::= writeValor");
		RESULT = valor;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writeAnidado",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // writeAnidado ::= writeAnidado COMA writeValor 
            {
              NodoBase RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase valores = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: writeAnidado ::= writeAnidado COMA writeValor");
		NodoBase hijoActual = valores;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(valor);
			RESULT = valores;
		}else{
			RESULT = valor;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writeAnidado",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // write ::= WRITELN LPARENT writeAnidado RPARENT separar PTCO 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
		if(debug)
			System.out.println("\t Regla: writeAnidado ::= writeAnidado PTCO");
		NodoEscribir nodoEscribir= new NodoEscribir(sentencia,true);
		RESULT = nodoEscribir;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // write ::= WRITE LPARENT writeAnidado RPARENT separar PTCO 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(debug)
			System.out.println("\t Regla: print ::= WRITE writeAnidado");
		RESULT = new NodoEscribir(sentencia,false);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // asignacion ::= IDENTIFICADOR separar DOSP IGUAL separar valorBool separar PTCO 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacion(variable, valor);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sent ::= ifx 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= if");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sent ::= asignacion 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= asignacion");
		RESULT=sentencia;                              
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sent ::= write 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= write");
		RESULT = sentencia;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // seq_sent ::= sent 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: seq_sent ::= Una Sentencia");
		RESULT = sentencia;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_sent",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seq_sent ::= seq_sent separar sent 
            {
              NodoBase RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase sentencias = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: seq_sent ::= Varias Sentencias");
		NodoBase hijoActual = sentencias;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(sentencia);
			RESULT = sentencias;
		}else{
			RESULT = sentencia;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_sent",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // identAnidado ::= IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		if(debug)
			System.out.println("\t Regla: identAnidado ::= IDENTIFICADOR");
		RESULT = new NodoIdentificador(ident);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identAnidado",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // identAnidado ::= identAnidado separar COMA separar IDENTIFICADOR 
            {
              NodoBase RESULT =null;
		int identificadoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int identificadoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoBase identificadores = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: identAnidado ::= identAnidado COMA IDENTIFICADOR");
		NodoBase hijoActual = identificadores;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(new NodoIdentificador(ident));
			RESULT = identificadores;
		}else{
			RESULT = new NodoIdentificador(ident);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identAnidado",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declararVariables ::= identAnidado separar DOSP separar BOOLEAN separar PTCO 
            {
              NodoBase RESULT =null;
		int identificadoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int identificadoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoBase identificadores = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		
		if(debug)
			System.out.println("\t Regla: declararVariables ::= identAnidado separar DOSP separar BOOLEAN PTCO");
		RESULT = new NodoDeclaracion(identificadores,Tipo.Variable.BOOLEAN);	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declararVariables ::= identAnidado separar DOSP separar INTEGER separar PTCO 
            {
              NodoBase RESULT =null;
		int identificadoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int identificadoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoBase identificadores = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		
		if(debug)
			System.out.println("\t Regla: declararVariables ::= identAnidado separar DOSP separar INTEGER PTCO");
		RESULT = new NodoDeclaracion(identificadores,Tipo.Variable.INTEGER);	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // seq_declararVariables ::= declararVariables 
            {
              NodoBase RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: seq_declararVariables ::= Una Declaracion");
		RESULT = declaracion;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_declararVariables",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // seq_declararVariables ::= seq_declararVariables separar declararVariables 
            {
              NodoBase RESULT =null;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase declaraciones = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: seq_declararVariables ::= Varias Declaraciones");
		NodoBase hijoActual = declaraciones;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(declaracion);
			RESULT = declaraciones;
		}else{
			RESULT = declaracion;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_declararVariables",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programaTotal ::= error 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla programaTotal ::= error"); 
		System.out.println("Error: programaTotal ::= NO ENCONTRADA");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programaTotal",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programaTotal ::= separar 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: programaTotal ::= nada ");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programaTotal",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programaTotal ::= separar PROGRAM separar IDENTIFICADOR PTCO separar VAR separar seq_declararVariables separar BEGIN separar seq_sent separar FINPROGRAM separar 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		NodoBase var = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase prog = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(debug)
			System.out.println("\t Regla: programaTotal ::= seq_sent");
		root=prog;
		vars=var;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programaTotal",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programaTotal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase start_val = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programaTotal ::= separar PROGRAM separar IDENTIFICADOR PTCO separar BEGIN separar seq_sent separar FINPROGRAM separar 
            {
              NodoBase RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase prog = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(debug)
			System.out.println("\t Regla: programaTotal ::= seq_sent");
		root=prog;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programaTotal",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

