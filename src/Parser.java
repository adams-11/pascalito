
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 03 19:05:47 VET 2012
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 03 19:05:47 VET 2012
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\016\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\005\000\002\003\003" +
    "\000\002\004\003\000\002\006\007\000\002\006\007\000" +
    "\002\007\005\000\002\007\003\000\002\010\003\000\002" +
    "\010\003\000\002\005\003\000\002\005\005\000\002\011" +
    "\003\000\002\011\002\000\002\012\004\000\002\012\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\050\000\012\002\ufff1\003\005\004\ufff1\034\006\001" +
    "\002\000\022\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\034\052\035\ufff2\001\002\000\004\002\ufffe\001" +
    "\002\000\022\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\034\uffef\035\uffef\001\002\000\004\002\051\001" +
    "\002\000\006\002\uffff\004\011\001\002\000\006\034\006" +
    "\035\ufff1\001\002\000\004\035\013\001\002\000\004\032" +
    "\014\001\002\000\006\005\ufff1\034\006\001\002\000\004" +
    "\005\016\001\002\000\010\007\ufff1\010\ufff1\034\006\001" +
    "\002\000\006\007\023\010\024\001\002\000\012\006\ufff1" +
    "\007\ufff1\010\ufff1\034\006\001\002\000\012\006\ufffc\007" +
    "\ufffc\010\ufffc\034\ufffc\001\002\000\012\006\ufffb\007\ufffb" +
    "\010\ufffb\034\ufffb\001\002\000\004\022\041\001\002\000" +
    "\004\022\025\001\002\000\006\011\031\012\026\001\002" +
    "\000\010\014\ufff4\023\ufff4\031\ufff4\001\002\000\006\023" +
    "\036\031\035\001\002\000\006\023\ufff7\031\ufff7\001\002" +
    "\000\006\023\ufff6\031\ufff6\001\002\000\010\014\033\023" +
    "\ufff5\031\ufff5\001\002\000\004\012\026\001\002\000\010" +
    "\014\ufff3\023\ufff3\031\ufff3\001\002\000\006\011\031\012" +
    "\026\001\002\000\004\032\037\001\002\000\012\006\ufff9" +
    "\007\ufff9\010\ufff9\034\ufff9\001\002\000\006\023\ufff8\031" +
    "\ufff8\001\002\000\006\011\031\012\026\001\002\000\006" +
    "\023\043\031\035\001\002\000\004\032\044\001\002\000" +
    "\012\006\ufffa\007\ufffa\010\ufffa\034\ufffa\001\002\000\010" +
    "\006\047\007\023\010\024\001\002\000\012\006\ufffd\007" +
    "\ufffd\010\ufffd\034\ufffd\001\002\000\006\002\ufff1\034\006" +
    "\001\002\000\004\002\001\001\002\000\004\002\000\001" +
    "\002\000\022\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\034\ufff0\035\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\050\000\010\002\006\011\007\012\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\011\012\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\014" +
    "\012\003\001\001\000\002\001\001\000\006\011\016\012" +
    "\003\001\001\000\010\003\017\004\020\006\021\001\001" +
    "\000\006\011\044\012\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\031\007\026\010\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\033\001\001\000\002\001\001\000" +
    "\006\005\031\010\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\031\007\041\010" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\045\006\021\001\001\000\002\001" +
    "\001\000\006\011\047\012\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	private NodoBase root=null;
	private NodoBase funciones=null;
	private boolean debug=true;	
	private int lineaNum=0;

	public NodoBase getRoot(){
		return root;
	}
	
	public NodoBase getFunciones(){
		return funciones;
	}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lineas ::= LINEANUEVA 
            {
              NodoBase RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineas",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lineas ::= lineas LINEANUEVA 
            {
              NodoBase RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineas",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // separar ::= 
            {
              NodoBase RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("separar",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // separar ::= lineas 
            {
              NodoBase RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("separar",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= expresion SUMA expresion 
            {
              NodoBase RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase e1 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase e2 = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= SUMA ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.SUMA);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= NUMERO 
            {
              NodoBase RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: expresion ::= NUMERO ");
		RESULT = new NodoNumero(num);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // writeValor ::= expresion 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: writeValor ::= expresion");
		RESULT = ex;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writeValor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // writeValor ::= CADENA 
            {
              NodoBase RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: writeValor ::= CADENA");
		RESULT = new NodoCadena(cadena.toString());				
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writeValor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // writeAnidado ::= writeValor 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		if(debug)
			System.out.println("\t Regla: writeAnidado ::= writeValor");
		RESULT = valor;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writeAnidado",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // writeAnidado ::= writeAnidado COMA writeValor 
            {
              NodoBase RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase valores = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: writeAnidado ::= writeAnidado COMA writeValor");
		NodoBase hijoActual = valores;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(valor);
			RESULT = valores;
		}else{
			RESULT = valor;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writeAnidado",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // write ::= WRITELN LPARENT writeAnidado RPARENT PTCO 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
		if(debug)
			System.out.println("\t Regla: writeAnidado ::= writeAnidado PTCO");
		NodoEscribir nodoEscribir= new NodoEscribir(sentencia,true);
		RESULT = nodoEscribir;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // write ::= WRITE LPARENT writeAnidado RPARENT PTCO 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(debug)
			System.out.println("\t Regla: print ::= WRITE writeAnidado");
		RESULT = new NodoEscribir(sentencia,false);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= write 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: sent ::= write");
		RESULT = sentencia;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // seq_sent ::= sent 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: seq_sent ::= Una Sentencia");
		RESULT = sentencia;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_sent",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // seq_sent ::= seq_sent separar sent 
            {
              NodoBase RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoBase sentencias = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(debug)
			System.out.println("\t Regla: seq_sent ::= Varias Sentencias");
		NodoBase hijoActual = sentencias;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(sentencia);
			RESULT = sentencias;
		}else{
			RESULT = sentencia;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_sent",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programaTotal ::= error 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla programaTotal ::= error"); 
		System.out.println("Error: programaTotal ::= NO ENCONTRADA");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programaTotal",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programaTotal ::= separar 
            {
              NodoBase RESULT =null;
		
		if(debug)
			System.out.println("\t Regla: programaTotal ::= nada ");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programaTotal",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programaTotal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBase start_val = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programaTotal ::= separar PROGRAM separar IDENTIFICADOR PTCO separar BEGIN separar seq_sent separar FINPROGRAM separar 
            {
              NodoBase RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoBase prog = (NodoBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(debug)
			System.out.println("\t Regla: programaTotal ::= seq_sent");
		root=prog;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programaTotal",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

