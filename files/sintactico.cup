import java_cup.runtime.*;
import ast.*;

action code {:
	private NodoBase root=null;
	private NodoBase funciones=null;
	private NodoBase vars=null;
	private boolean debug=true;	
	private int lineaNum=0;

	public NodoBase getRoot(){
		return root;
	}

	public NodoBase getVars(){
		return vars;
	}
	
	public NodoBase getFunciones(){
		return funciones;
	}
:}

/* Simbolos Terminales */

terminal PROGRAM;
terminal BEGIN;
terminal FINPROGRAM;
terminal VAR;
terminal INTEGER;
terminal BOOLEAN;
terminal String IDENTIFICADOR;
terminal String CADENA;
terminal String NUMERO;
terminal IGUAL;
terminal WRITE;
terminal WRITELN;
terminal SUMA;
terminal REST;
terminal MULT;
terminal DIVI;
terminal MOD;
terminal SIGNO;
terminal LPARENT;
terminal RPARENT;
terminal LCORCHE;
terminal RCORCHE;
terminal TRUE;
terminal FALSE;
terminal AND;
terminal OR;
terminal NOT;
terminal COMA;
terminal PTCO;
terminal DOSP;
terminal END;
terminal LINEANUEVA;

/* Simbolos No Terminales */
non terminal NodoBase programaTotal;
non terminal NodoBase declararVariables;
non terminal NodoBase seq_declararVariables;
non terminal NodoBase ident;
non terminal NodoBase identAnidado;
non terminal NodoBase seq_sent;
non terminal NodoBase sent;
non terminal NodoBase asignacion;
non terminal NodoBase asignacionBool;
non terminal NodoBase expresion;
non terminal NodoBase write;
non terminal NodoBase writeAnidado;
non terminal NodoBase writeValor;
non terminal NodoBase separar;
non terminal NodoBase lineas;

precedence left REST, SUMA;
precedence left MULT, DIVI, MOD;
precedence left SIGNO;
precedence left AND, OR;
precedence right NOT;


/* REGLAS GRAMATICALES */
programaTotal ::=
	separar PROGRAM separar IDENTIFICADOR PTCO separar BEGIN separar seq_sent:prog separar FINPROGRAM separar {:
		if(debug)
			System.out.println("\t Regla: programaTotal ::= seq_sent");
		root=prog;
	:}
	| separar PROGRAM separar IDENTIFICADOR PTCO separar VAR separar seq_declararVariables:var separar BEGIN separar seq_sent:prog separar FINPROGRAM separar {:
		if(debug)
			System.out.println("\t Regla: programaTotal ::= seq_sent");
		root=prog;
		vars=var;
	:}
	| separar {:
		if(debug)
			System.out.println("\t Regla: programaTotal ::= nada ");
	:}
	| error {:
		if(debug)
			System.out.println("\t Regla programaTotal ::= error"); 
		System.out.println("Error: programaTotal ::= NO ENCONTRADA");
	:}
;


seq_declararVariables ::=
	seq_declararVariables:declaraciones separar declararVariables:declaracion {:
		if(debug)
			System.out.println("\t Regla: seq_declararVariables ::= Varias Declaraciones");
		NodoBase hijoActual = declaraciones;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(declaracion);
			RESULT = declaraciones;
		}else{
			RESULT = declaracion;
		}
	:}
	| declararVariables:declaracion {:
		if(debug)
			System.out.println("\t Regla: seq_declararVariables ::= Una Declaracion");
		RESULT = declaracion;
	:}
;

/* agregar el token separar para crear una sintaxis libre de contexto*/
declararVariables ::=
	identAnidado:identificadores separar DOSP separar INTEGER separar PTCO {:
		if(debug)
			System.out.println("\t Regla: declararVariables ::= identAnidado separar DOSP separar INTEGER PTCO");
		RESULT = new NodoDeclaracion(identificadores,Tipo.Variable.INTEGER);	
	:}
	| identAnidado:identificadores separar DOSP separar BOOLEAN separar PTCO {:
		if(debug)
			System.out.println("\t Regla: declararVariables ::= identAnidado separar DOSP separar BOOLEAN PTCO");
		RESULT = new NodoDeclaracion(identificadores,Tipo.Variable.BOOLEAN);	
	:}
;

identAnidado ::=
	identAnidado:identificadores separar COMA separar IDENTIFICADOR:ident {:
		if(debug)
			System.out.println("\t Regla: identAnidado ::= identAnidado COMA IDENTIFICADOR");
		NodoBase hijoActual = identificadores;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(new NodoIdentificador(ident));
			RESULT = identificadores;
		}else{
			RESULT = new NodoIdentificador(ident);
		}
	:}
	| IDENTIFICADOR:ident {: 
		if(debug)
			System.out.println("\t Regla: identAnidado ::= IDENTIFICADOR");
		RESULT = new NodoIdentificador(ident);
	:}
;

seq_sent ::=
	seq_sent:sentencias separar sent:sentencia {:
		if(debug)
			System.out.println("\t Regla: seq_sent ::= Varias Sentencias");
		NodoBase hijoActual = sentencias;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(sentencia);
			RESULT = sentencias;
		}else{
			RESULT = sentencia;
		}
	:}
	| sent:sentencia {:
		if(debug)
			System.out.println("\t Regla: seq_sent ::= Una Sentencia");
		RESULT = sentencia;
	:}
;

sent ::=
	write:sentencia {:
		if(debug)
			System.out.println("\t Regla: sent ::= write");
		RESULT = sentencia;
	:}
	| asignacion:sentencia {:
		if(debug)
			System.out.println("\t Regla: sent ::= asignacion");
		RESULT=sentencia;                              
	:}
	| asignacionBool:sentencia {:
		if(debug)
			System.out.println("\t Regla: sent ::= asignacion");
		RESULT=sentencia;                              
	:}
;

asignacion ::=
	IDENTIFICADOR:variable separar DOSP IGUAL separar expresion:valor separar PTCO {:
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL expresion");
		RESULT = new NodoAsignacion(variable, valor);
	:}
;

asignacionBool ::=
	IDENTIFICADOR:variable separar DOSP IGUAL separar TRUE separar PTCO {:
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL TRUE");
		RESULT = new NodoAsignacionBool(variable, new NodoNumero(1));
	:}
	| IDENTIFICADOR:variable separar DOSP IGUAL separar FALSE separar PTCO {:
		if(debug)
			System.out.println("\t Regla: asignacion ::= IDENTIFICADOR IGUAL FALSE");
		RESULT = new NodoAsignacionBool(variable, new NodoNumero(0));
	:}
;

write ::=
	WRITE LPARENT writeAnidado:sentencia RPARENT separar PTCO {:
		if(debug)
			System.out.println("\t Regla: print ::= WRITE writeAnidado");
		RESULT = new NodoEscribir(sentencia,false);
	:}
	| WRITELN LPARENT writeAnidado:sentencia RPARENT separar PTCO {: 
		if(debug)
			System.out.println("\t Regla: writeAnidado ::= writeAnidado PTCO");
		NodoEscribir nodoEscribir= new NodoEscribir(sentencia,true);
		RESULT = nodoEscribir;
	:}	
;

writeAnidado ::=
	writeAnidado:valores COMA writeValor:valor {:
		if(debug)
			System.out.println("\t Regla: writeAnidado ::= writeAnidado COMA writeValor");
		NodoBase hijoActual = valores;
		if(hijoActual !=null){
			while(hijoActual.tieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(valor);
			RESULT = valores;
		}else{
			RESULT = valor;
		}
	:}			
	| writeValor:valor {: 
		if(debug)
			System.out.println("\t Regla: writeAnidado ::= writeValor");
		RESULT = valor;
	:}		
;

writeValor ::=
	CADENA:cadena {:
		if(debug)
			System.out.println("\t Regla: writeValor ::= CADENA");
		RESULT = new NodoCadena(cadena.toString());				
	:}
	| expresion:ex {:
		if(debug)
			System.out.println("\t Regla: writeValor ::= expresion");
		RESULT = ex;
	:}
;

expresion ::= 
	NUMERO:num {:
		if(debug)
			System.out.println("\t Regla: expresion ::= NUMERO ");
		RESULT = new NodoNumero(num);
	:}
	| IDENTIFICADOR:variable {:
		if(debug)
			System.out.println("\t Regla: expresion ::= IDENTIFICADOR ");
		RESULT = new NodoIdentificador(variable);
	:}
	| expresion:e1 SUMA expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: expresion ::= SUMA ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.SUMA);
	:}
	| expresion:e1 REST expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: expresion ::= REST ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.REST);
	:}
	| expresion:e1 MULT expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: expresion ::= MULT ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.MULT);
	:}
	| expresion:e1 DIVI expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: expresion ::= DIVI ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.DIVI);
	:}
	| expresion:e1 MOD expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: expresion ::= MOD ");
		RESULT = new NodoOperacionMat(e1,e2, Tipo.OpMat.MOD);
	:}
	| REST expresion:ex {:
		if(debug)
			System.out.println("\t Regla: expresion ::= RESTA expresion ");
		RESULT = new NodoOperacionMatUnaria(ex);
	:}
	%prec SIGNO
	| LPARENT expresion:e RPARENT {:
		if(debug)
			System.out.println("\t Regla: expresion ::= PARENTESIS ");
		RESULT = e;
	:}
;

condicion ::=
	expresion:e1 IGUAL expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: condicion ::= IGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.IGUAL);
	:}
	| expresion:e1 MENOR expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: condicion ::= MENOR");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MENOR);
	:}
	| expresion:e1 MENORIGUAL expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: condicion ::= MENORIGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MENORIGUAL);
	:}
	| expresion:e1 MAYOR expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: condicion ::= MAYOR");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MAYOR);
	:}
	| expresion:e1 MAYORIGUAL expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: condicion ::= MAYORIGUAL");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.MAYORIGUAL);
	:}
	| expresion:e1 DIFERENTE expresion:e2 {:
		if(debug)
			System.out.println("\t Regla: condicion ::= DIFERENTE");
		RESULT = new NodoOperacionBool(e1,e2,Tipo.OpBool.DIFERENTE);
	:}
;

separar ::=
	lineas {: :}
	| {: :}
;

lineas ::=
	lineas LINEANUEVA {: :}
	| LINEANUEVA {: :}
;